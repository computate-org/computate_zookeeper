---
- name: "install podman dependency"
  package:
    name:
      - python3
      - python3-pip
      - libselinux-python
      - libsemanage-python
      - podman
    state: present
  become: true
  when: ansible_pkg_mgr != 'homebrew' and APP_PYTHON == '/usr/bin/python'
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: "install podman dependency"
  package:
    name:
      - python3
      - python3-pip
      - python3-libselinux
      - python3-libsemanage
      - podman
    state: present
  become: true
  when: ansible_pkg_mgr != 'homebrew' and APP_PYTHON == '/usr/bin/python3'
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: Set container_manage_cgroup flag on to run podman containers as systemd services and keep it persistent across reboots
  ansible.posix.seboolean:
    name: container_manage_cgroup
    state: true
    persistent: true
  become: true
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: Check for the {{ APP_NAME }} download
  stat:
    path: "{{ APP_DOWNLOAD_DEST }}"
  register: APP_DOWNLOAD
- name: Download the {{ APP_NAME }} application. 
  get_url:
    url: "{{ APP_DOWNLOAD_URL }}"
    dest: "{{ APP_DOWNLOAD_DEST }}"
  when: not APP_DOWNLOAD.stat.exists
- name: Create the {{ APP_NAME }} install directory {{ APP_OPT }}. 
  file:
    name: "{{ APP_OPT }}"
    state: directory
    owner: "{{ APP_USER }}"
  become: true
- name: Install {{ APP_NAME }} into the {{ APP_OPT }} install directory. 
  unarchive:
    src: "{{ APP_DOWNLOAD_DEST }}"
    dest: "{{ APP_OPT }}"
    remote_src: true
    extra_opts: [--strip-components=1]
  become: true
- name: Create the {{ APP_NAME }} conf directory {{ APP_CONF }}
  file:
    name: "{{ APP_CONF }}"
    state: directory
    owner: "{{ APP_USER }}"
    mode: 0777
  become: true
- name: Create the {{ APP_NAME }} config file {{ APP_CONF }}/zoo.cfg
  template:
    src: zookeeper_config.j2
    dest: "{{ APP_CONF }}/zoo.cfg"
  become: true
- name: Create the {{ APP_NAME }} log4j.properties file {{ APP_CONF }}/log4j.properties
  template:
    src: zookeeper_log4j.properties
    dest: "{{ APP_CONF }}/log4j.properties"
  become: true
- name: set SELinux permissions on {{ APP_CONF }}
  sefcontext:
    target: "{{ APP_CONF }}"
    setype: container_file_t
  become: true
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: set SELinux permissions on {{ APP_CONF }}/*
  sefcontext:
    target: "{{ APP_CONF }}/*"
    setype: container_file_t
  become: true
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: reload SELinux policy to ensure that {{ APP_NAME }} is executable
  command: "restorecon -irv {{ APP_CONF }}"
  become: true
- name: Create the {{ APP_NAME }} data directory {{ APP_DATA }}
  file:
    name: "{{ APP_DATA }}"
    state: directory
    owner: "{{ APP_USER }}"
    mode: 0777
  become: true
- name: set SELinux permissions on {{ APP_DATA }}
  sefcontext:
    target: "{{ APP_DATA }}"
    setype: container_file_t
  become: true
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"
- name: reload SELinux policy to ensure that {{ APP_NAME }} is executable
  command: "restorecon -irv {{ APP_DATA }}"
  become: true
- name: Create the {{ APP_NAME }} systemd service {{ APP_SYSTEMD }}
  template:
    src: zookeeper_systemd_service.j2
    dest: "{{ APP_SYSTEMD }}"
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Reload the services
  systemd:
    daemon_reload: true
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Start and enable the {{ APP_NAME }} service
  service:
    name: "{{ APP_SERVICE }}"
    enabled: true
    state: restarted
  become: true
  when: ansible_pkg_mgr != 'homebrew'

- name: Create the {{ APP_NAME }} launchd service.
  template:
    src: zookeeper_launchd_service.j2
    dest: "~/Library/LaunchAgents/org.zookeeper.plist"
  when: ansible_pkg_mgr == 'homebrew'
- name: Load the {{ APP_NAME }} launchd service.
  shell: launchctl load ~/Library/LaunchAgents/org.zookeeper.plist
  when: ansible_pkg_mgr == 'homebrew'
- name: Start the {{ APP_NAME }} launchd service.
  shell: launchctl start org.zookeeper
  when: ansible_pkg_mgr == 'homebrew'

